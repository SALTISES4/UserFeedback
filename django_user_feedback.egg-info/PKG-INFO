Metadata-Version: 1.1
Name: django-user-feedback
Version: 0.1
Summary: A Django app to collect and store user feedback.
Home-page: https://www.example.com/
Author: Arthur Ayestas Hilgert
Author-email: aahilgert@gmail.com
License: UNKNOWN
Description: =====
        django_user_feedback
        =====
        
        django_user_feedback is a simple Django app to collect and store user feedback.
        
        Quick start
        -----------
        
        1. Add "user_feedback" to your INSTALLED_APPS setting like this::
        
            INSTALLED_APPS = [
                ...
                'user_feedback',
            ]
        
        2. Include the user_feedback URLconf in your project urls.py like this::
        
            url("feedback/", include("user_feedback.urls")),
        
        3. Run `python manage.py migrate` to create the user_feedback models.
        
        4. Setup an `EMAIL_BACKEND` in your project's settings.py.
        
        5. Add admin emails to `ADMINS`'s list of tuples in your project's settings.py
        
            ADMINS = [('John', 'john@example.com'), ('Mary', 'mary@example.com')]
        
        6. If '/accounts/login/' is not active, make sure to have a `LOGIN_URL` in your settings.py.
        
        7. Import user_feedback's minified script in your base template(s).
        
            <script src="{% static 'user_feedback/js/scripts.min.js' %}" defer="true"></script>
        
        8. Place the following element in templates where you would like for users to offer feedback.
        
            <div id="user-feedback-container"></div>
        
        9. If not in the template already, add a csrf token.
        
            {% csrf_token %}
        
        10. Add the desired company logo to your static file.
        
        11. Inject the diolog scripts by calling the `injectDialog` funciton.
            `injectDialog` will take four parameters, dialog title, company logo path,
            snackbar post success message, and snackbar post failure message.
        
            root.injectDialog(
              "{% trans 'Let us know how we can improve your experience!' %}",
              "{% static 'user_feedback/brand/SCIVERO-LOGO-DARK.png' %}",
              "{% trans 'Thanks for your feedback!' %}",
              "{% trans 'Sorry, please try again later!' %}"
            );
        
        Quick start dev
        ---------------
        
        1. Install node modules.
        
            npm install
        
        2. Install dev-requirements.
        
            pip install -r requirements/dev-requirements.txt
        
        3. Install pre-commit.
        
            pre-commit install
        
        4. Create a superuser and login.
        
            ./manage.py createsuperuser
            ...
        
        5. Start the server.
        
            python user_feedback.py runserver
        
        6. Navigate to '(root)/test/button/', to see the user_feedback button in action.
        
        7. Build when you make edits to scripts.js.
        
            yarn run gulp build-js
        
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: X.Y  # Replace "X.Y" as appropriate
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
